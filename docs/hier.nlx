expression # {
    variable {
        [identifier]
    }
    call {
        [expression parenthesis [expression]]
    }
    parenthesized~ {
        [parenthesis [expression]]
    }
    accession {
        member~ {
            [expression '.' expression]
        }
        place~ {
            [expression square_brackets [expression]]
            // token.getNamedChild("expression", 0);
            // Token t = token.getNamedChild("square_brackets", 0);
            // t.size();
            // t.getNamedChild("expression", i);
        }
    }
    literal {
        number # {
            fraction~ {
                [digits '.' digits]
            }
            integer~ {
                [digits]
            }
        }
        string~ {
            [double_quotes]
            [single_quotes]
        }
    }
    power {
        [expression '^' expression]
        [expression '**' expression]
    }
    multiplicative_operation {
        multiplication {
            [expression '*' expression]
        }
        negation {
            ['-' expression]
        }
        posation {
            ['+' expression]
        }
    }
    additive_operation {
        addition {
            [expression '+' expression]
        }
        subtraction {
            [expression '-' expression]
        }
    }
    logical {
        ~and {
            [expression '&&' expression]
        }
        ~or {
            [expression '||' expression]
        }
    }
    comparison {
        equal_to {
            [expression '==' expression]
        }
        greater_than_or_equal_to {
            [expression '>=' expression]
        }
        less_than_or_equal_to {
            [expression '<=' expression]
        }
        greater_than {
            [expression '<' expression]
        }
        less_than {
            [expression '>' expression]
        }
    }
}

statement {
    assignment~ {
        [accession '=' expression]
    }
    assertion~ {
        ['assert' expression]
    }
    if~ # {
        ~else {
            ['if' parenthesis [expression] statement 'else' statement]
        }
        ~ {
            ['if' parenthesis [expression] statement]
        }
    }
    loop~ {
        for~ {
            ['for' parenthesis [variable 'in' expression] statement]
        }
        while~ {
            ['while' parenthesis [expression] statement]
        }
    }
}