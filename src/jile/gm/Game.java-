package jile.gm;

import java.util.*;

abstract public class Game {

    private final Room main;
    Room currentRoom;

    public Game(Room main) {
        this.main = main;
        this.currentRoom = main;
    }

    abstract public class Group<T extends Thing> {
        abstract public Collection<T> getCollection();

        public void end() {
            getCollection().clear();
        }
    }

    abstract public class Room extends Group<Thing> {

        private PriorityQueue<Layer> layers;
        private Layer currentLayer;
        private boolean running;
        private final Thread thread;
        private double updateRate;
        private final Set<Thing> everything;

        public Room() {
            this.layers = new PriorityQueue<Layer>();
            this.thread = new Thread();
            this.updateRate = 30;
            this.everything = new HashSet<Thing>();
            // TODO screen size
            // TODO bgc
        }

        @Override
        public Collection<Thing> getCollection() {
            return everything;
        }

        private class Layer extends Group<Thing> implements Comparable<Layer> {
            private final List<Thing> things;
            private final double depth;

            private Layer(double depth) {
                this.things = new ArrayList<Thing>();
                this.depth = depth;
                layers.add(this);
            }

            @Override
            public int compareTo(Layer other) {
                return Double.compare(depth, other.depth);
            }

            public void draw() {
                for (Thing thing : things)
                    thing.onDraw();
            }

            @Override
            public Collection<Thing> getCollection() {
                return things;
            }
        }

        abstract public void onStart();

        abstract public void onEnd();

        public void start() {
            running = true;
            thread.start();
            onStart();
        }

        @Override
        public void end() {
            onEnd();
            super.end();
            running = false;
        }

        private class Thread extends java.lang.Thread {
            @Override
            public void run() {
                while (running) {
                    try {
                        update();
                    } catch (Exception e) {
                        e.printStackTrace();
                        break;
                    }
                }
            }
        }

        public void update() throws Exception {

            // handle events

            for (Thing thing : everything)
                thing.onUpdate();

        }

        public void draw() {
            // clear the background

            for (Layer layer : layers)
                layer.draw();

            // update the screen buffer

            // Thread.sleep((long) (1000 / updateRate));
        }
    }

    public static <T extends Thing> void join(Group<T> group, T thing) {
        group.getCollection().add(thing);
        thing.groups.push();
    }

    public static <T extends Thing> void leave(Group<T> group, T thing) {
        group.getCollection().remove(thing);
    }

    abstract public class Thing {

        private final Stack<Group<? super Thing>> groups;

        public Thing() {
            groups = new Stack<Group<? super Thing>>();
            onCreate();
            Game.join(currentRoom, this);
        }

        public void destroy() {
            onDestroy();

        }

        abstract public void onCreate();

        abstract public void onUpdate();

        abstract public void onDraw();

        abstract public void onDestroy();
    }

    abstract public void onStart();

    abstract public void onEnd();

    public void start() {
        main.start();
        onStart();
    }

    public void end() {
        onEnd();
        currentRoom.end();
    }

    public void restart() {
        end();
        start();
    }
}
