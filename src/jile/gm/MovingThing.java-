package jile.gm;

import static jile.common.Common.*;

abstract public class MovingThing extends Game.Thing {

    private double acceleration_x;
    private double acceleration_y;
    private double velocity_x;
    private double velocity_y;
    private double position_x;
    private double position_y;
    private double offset_x;
    private double offset_y;
    private boolean bounce;

    public MovingThing() {
        this.acceleration_x = 0;
        this.acceleration_y = 0;
        this.velocity_x = 0;
        this.velocity_y = 0;
        this.position_x = 0;
        this.position_y = 0;
        this.offset_x = rect.centerx;
        this.offset_y = rect.centery;
        this.bounce = false;
    }

    public void position_set(int x, int y) {
        this.position_x = x + this.offset_x;
        this.position_y = y + this.offset_y;
    }

    public void position_set_random() {
        double rx = Math.random() * (this.game.screen.get_width() - this.rect.w);
        double ry = Math.random() * (this.game.screen.get_height() - this.rect.h);
        position_set(rx, ry);
    }

    public void motion_set(double speed, double direction) {
        this.velocity_x = -Math.cos(direction / 180 * Math.PI) * speed;
        this.velocity_y = +Math.sin(direction / 180 * Math.PI) * speed;
    }

    public void motion_add(double speed, double direction) {
        this.velocity_x += -Math.cos(direction / 180 * Math.PI) * speed;
        this.velocity_y += +Math.sin(direction / 180 * Math.PI) * speed;
    }

    public void motion_add_random(double speed) {
        motion_add(speed, Math.random() * 360);
    }

    public void velocity_multiply(double factor) {
        this.velocity_x *= factor;
        this.velocity_y *= factor;
    }

    public void acceleration_set(double weight, double direction) {
        this.acceleration_x = -Math.cos(direction / 180 * Math.PI) * weight;
        this.acceleration_y = +Math.sin(direction / 180 * Math.PI) * weight;
    }

    abstract public boolean is_stable();

    public void bounce_horizontally() {
        this.velocity_x *= -1;
        this.velocity_multiply(0.9);
    }

    public void bounce_vertically() {
        this.velocity_y *= -1;
        this.velocity_multiply(0.9);
    }

    /**
     * Updates the position of the thing based on its velocity and acceleration.
     */
    @Override
    public void onUpdate() {

        this.position_x += this.velocity_x;
        this.position_y += this.velocity_y;

        if (!is_stable()) {
            this.velocity_x += this.acceleration_x;
            this.velocity_y += this.acceleration_y;
        }

        if (this.bounce) {
            if (this.position_x <= 0 || this.position_x + this.rect.w >= this.game.screen.get_width())
                this.bounce_horizontally();

            if (this.position_y <= 0 || this.position_y + this.rect.h >= this.game.screen.get_height())
                this.bounce_vertically();
        }
    }

    /**
     * Assigns the precise position of the thing to the integer variables of the
     * rect.
     */
    @Override
    public void onDraw() {
        this.rect.x = this.position_x;
        this.rect.y = this.position_y;
    }

    public double distanceFrom(MovingThing other) {
        return sqrt(sqr(this.position_x - other.position_x) + sqr(this.position_y - other.position_y));
    }
}